// Generated by LiveScript 1.4.0
/**
 * User: pilagod
 * Date: 7/10/15
 * Time: 4:55 PM
 */
(function(){
  var React, TodoActions, TodoTextInput, cx, ReactPropTypes, TodoItem;
  React = require('react');
  TodoActions = require('../actions/TodoActions');
  TodoTextInput = require('./TodoTextInput-React');
  cx = require('react/lib/cx');
  ReactPropTypes = React.PropTypes;
  TodoItem = React.createClass({
    propTypes: {
      todo: ReactPropTypes.object.isRequired
    },
    getInitialState: function(){
      return {
        isEditing: false
      };
    }
    /**
     * @return {object}
     */,
    render: function(){
      var input, todo;
      todo = this.props.todo;
      if (this.state.isEditing) {
        input = (
        	<TodoTextInput
        		className = "edit"
        		onSave = {this._onSave}
        		value = {todo.text}
        	/>
        );
      }
      return (
      	<li
      		className = {cx({
      			'completed': todo.complete,
      			'editing': this.state.isEditing
      		})}
      		key = {todo.id}>
      		<div className = "view">
      			<input
      				className = "toggle"
      				type = "checkbox"
      				checked = {todo.complete}
      				onChange = {this._onToggleComplete}
      			/>
      			<label onDoubleClick = {this._onDoubleClick}>
      				{todo.text}
      			</label>
      			<button className = "destroy" onClick = {this._onDestroyClick} />
      		</div>
      		{input}
      	</li>
      );
    },
    _onToggleComplete: function(){
      TodoActions.toggleComplete(this.props.todo);
    },
    _onDoubleClick: function(){
      this.setState({
        isEditing: true
      });
    }
    /**
      * Event handler called within TodoTextInput.
      * Defining this here allows TodoTextInput to be used in multiple places
      * in different ways.
      * @param  {string} text
      */,
    _onSave: function(text){
      TodoActions.updateText(this.props.todo.id, text);
      this.setState({
        isEditing: false
      });
    },
    _onDestroyClick: function(){
      TodoActions.destroy(this.props.todo.id);
    }
  });
  module.exports = TodoItem;
}).call(this);
